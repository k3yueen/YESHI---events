// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String         @id @default(cuid())
  email          String         @unique
  name           String?
  image          String?
  password       String?        // For email/password authentication
  role           Role           @default(USER)
  language       Language       @default(ENGLISH)
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
  
  // Relations
  subscription   Subscription?
  favorites      Favorite[]
  collections    Collection[]
  reviews        Review[]
  spots          Spot[]         // For venue owners
  
  // Auth
  accounts       Account[]
  sessions       Session[]
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model City {
  id        String   @id @default(cuid())
  name      String
  nameRo    String   // Romanian name
  nameEn    String   // English name
  slug      String   @unique
  lat       Float
  lng       Float
  spots     Spot[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Spot {
  id            String       @id @default(cuid())
  slug          String       @unique
  name          String
  nameRo        String       // Romanian name
  nameEn        String       // English name
  about         String?
  aboutRo      String?      // Romanian description
  aboutEn      String?      // English description
  address      String
  cityId       String
  city         City         @relation(fields: [cityId], references: [id])
  lat          Float
  lng          Float
  priceTier    PriceTier?
  categoryId   String
  category     Category     @relation(fields: [categoryId], references: [id])
  tags         Tag[]        @relation("SpotTags")
  openedAt     DateTime?
  isNew        Boolean      @default(false)
  isActive     Boolean      @default(true)
  createdAt    DateTime     @default(now())
  updatedAt    DateTime     @updatedAt
  
  // Relations
  venueId      String?
  venue        User?        @relation(fields: [venueId], references: [id])
  promos       Promo[]
  favorites    Favorite[]
  reviews      Review[]
  collections  CollectionSpot[]
  images      Image[]
  
  // Venue details
  phone        String?
  website      String?
  hours        Json?        // Operating hours
  features     Feature[]    @relation("SpotFeatures") // Pet-friendly, outdoor seating, etc.
}

model Category {
  id        String   @id @default(cuid())
  name      String
  nameRo    String
  nameEn    String
  icon      String   // Emoji or icon name
  spots     Spot[]
  createdAt DateTime @default(now())
}

model Tag {
  id        String   @id @default(cuid())
  name      String
  nameRo    String
  nameEn    String
  spots     Spot[]   @relation("SpotTags")
  createdAt DateTime @default(now())
}

model Feature {
  id        String   @id @default(cuid())
  name      String
  nameRo    String
  nameEn    String
  icon      String
  spots     Spot[]   @relation("SpotFeatures")
  createdAt DateTime @default(now())
}

model Promo {
  id          String   @id @default(cuid())
  title       String
  titleRo     String
  titleEn     String
  description String?
  descriptionRo String?
  descriptionEn String?
  spotId      String
  spot        Spot     @relation(fields: [spotId], references: [id])
  startsAt    DateTime
  endsAt      DateTime
  isActive    Boolean  @default(true)
  isBoosted   Boolean  @default(false)
  boostExpiresAt DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Image {
  id        String   @id @default(cuid())
  url       String
  alt       String?
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id])
  isPrimary Boolean  @default(false)
  createdAt DateTime @default(now())
}

model Favorite {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, spotId])
}

model Collection {
  id          String   @id @default(cuid())
  name        String
  nameRo      String
  nameEn      String
  description String?
  descriptionRo String?
  descriptionEn String?
  isPublic    Boolean  @default(true)
  isEditorial Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  spots       CollectionSpot[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model CollectionSpot {
  id           String     @id @default(cuid())
  collectionId String
  collection   Collection @relation(fields: [collectionId], references: [id])
  spotId       String
  spot         Spot       @relation(fields: [spotId], references: [id])
  order        Int
  createdAt    DateTime   @default(now())

  @@unique([collectionId, spotId])
}

model Review {
  id        String   @id @default(cuid())
  rating    Int      // 1-5 stars
  comment   String?
  commentRo String?
  commentEn String?
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  spotId    String
  spot      Spot     @relation(fields: [spotId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, spotId])
}

model Subscription {
  id                String              @id @default(cuid())
  userId            String              @unique
  user              User                @relation(fields: [userId], references: [id])
  stripeId          String              @unique
  plan              SubscriptionPlan
  status            SubscriptionStatus
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  cancelAtPeriodEnd Boolean             @default(false)
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
}

// Enums
enum Role {
  USER
  VENUE
  ADMIN
}

enum Language {
  ROMANIAN
  ENGLISH
}

enum PriceTier {
  BUDGET
  MODERATE
  PREMIUM
  LUXURY
}

enum SubscriptionPlan {
  USER_FREE
  USER_PREMIUM
  VENUE_FREE
  VENUE_PRO
}

enum SubscriptionStatus {
  ACTIVE
  CANCELED
  INCOMPLETE
  PAST_DUE
  UNPAID
}
